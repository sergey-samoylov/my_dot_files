#!/usr/bin/env bash
#
# DESCRIPTION:
#
#   Set the bash prompt according to:
#    * the active virtualenv
#    * the branch/status of the current git repository
#    * the return value of the previous command
#
# USAGE:
#
#   1. Save this file as ~/.bash_prompt
#   2. Add the following line to the end of your ~/.bashrc or ~/.bash_profile:
#        . ~/.bash_prompt
#
# LINEAGE:
#
#   Based on works by woods & insin:
#
#   https://gist.github.com/31967
#   https://gist.github.com/insin/1425703

# Colors are needed by several bash-scripts and this is just one of them
# So, let's place colors in a special file
# ~/.config/aliasrc_bash_colors


# Detect whether the current directory is a git repository.
function is_git_repository {
  git branch > /dev/null 2>&1
}

# Determine the branch/state information for this git repository.
function set_git_branch {
  # Capture the output of the "git status" command.
  git_status="$(git status 2> /dev/null)"

  # Set color based on clean/staged/dirty.
  case "${git_status}" in
      *"working tree clean"*) state="${Green}";;
      *"Changes to be committed"*) state="${Yellow}";;
      *) state="${Red}";;
  esac

#  if [[ ${git_status} =~ "working tree clean" ]]; then
#    state="${Green}"
#  elif [[ ${git_status} =~ "Changes to be committed" ]]; then
#    state="${Yellow}"
#  else
#    state="${Red}"
#  fi

  # Set arrow icon based on status against remote.
  remote_pattern="# Your branch is (ahead|behind)+ "
  if [[ ${git_status} =~ ${remote_pattern} ]]; then
    if [[ ${BASH_REMATCH[1]} == "ahead" ]]; then
      remote="↑"
    else
      remote="↓"
    fi
  else
    remote=""
  fi
  diverge_pattern="# Your branch and (.*) have diverged"
  if [[ ${git_status} =~ ${diverge_pattern} ]]; then
    remote="↕"
  fi

  # Get the name of the branch.
  branch="$(git rev-parse --abbrev-ref HEAD)"

  # Set the final branch string.
  BRANCH="${state}(${branch})${remote}${Color_Off} "
}

# Return the prompt symbol to use, colorized based on the return value of the
# previous command.
function set_prompt_symbol () {
  if test $1 -eq 0 ; then
      PROMPT_SYMBOL="${BAqua}>${Color_Off}"
  else
      PROMPT_SYMBOL="${Purple}\$${Color_Off}"
  fi
}

# Determine active Python virtualenv details.
function set_virtualenv () {
  if test -z "$VIRTUAL_ENV" ; then
      PYTHON_VIRTUALENV=""
  else
      PYTHON_VIRTUALENV="${Green}(`basename \"$VIRTUAL_ENV\"`)${Color_Off} "
  fi
}

# Set the full bash prompt.
function set_bash_prompt () {
  # Set the PROMPT_SYMBOL variable. We do this first so we don't lose the
  # return value of the last command.
  set_prompt_symbol $?

  # Set the PYTHON_VIRTUALENV variable.
  set_virtualenv

  # Set the BRANCH variable.
  if is_git_repository ; then
    set_git_branch
  else
    BRANCH=''
  fi

  # Set the bash prompt variable.
  PS1="${PYTHON_VIRTUALENV}${Orange}\[\$(date +%H:%M)\] ${BBlue}\$PWD${Color_Off} ${BRANCH}
${PROMPT_SYMBOL} "
}

# Tell bash to execute this function just before displaying its prompt.
PROMPT_COMMAND=set_bash_prompt
